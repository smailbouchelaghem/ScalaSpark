[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\33751\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\33751\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.8 (Oracle Corporation Java 11.0.16.1)
[debug]       Load.loadUnit: plugins took 100.0017ms
[debug]       Load.loadUnit: defsScala took 0.679ms
[debug] [Loading] Scanning directory C:\Users\33751\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\33751\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 65.9387 ms
[debug]           Load.resolveProject(global-plugins) took 58.9079ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\33751\.sbt\1.0\plugins, plugins: List(<none>))) took 163.3439ms
[debug] [Loading] Done in C:\Users\33751\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 196.8468ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4361ms
[debug]     Load.loadUnit(file:/C:/Users/33751/.sbt/1.0/plugins/, ...) took 310.1401ms
[debug]   Load.apply: load took 483.6163ms
[debug]   Load.apply: resolveProjects took 5.2599ms
[debug]   Load.apply: finalTransforms took 50.7118ms
[debug]   Load.apply: config.delegates took 8.4845ms
[debug]   Load.apply: Def.make(settings)... took 382.4366ms
[debug]   Load.apply: structureIndex took 110.5848ms
[debug]   Load.apply: mkStreams took 1.7636ms
[info] loading global plugins from C:\Users\33751\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4217.4893ms
[debug]           Load.loadUnit: plugins took 17.6411ms
[debug]           Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse\project
[debug]             Load.loadUnit: mkEval took 6.5968ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7872 ms
[info] loading settings for project sparkscalacourse-build from idea.sbt ...
[debug]               Load.resolveProject(sparkscalacourse-build) took 3.8649ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparkscalacourse-build, base: C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse\project, plugins: List(<none>))) took 6.1882ms
[debug] [Loading] Done in C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse\project, returning: (sparkscalacourse-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2112.3122ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.4136ms
[debug]         Load.loadUnit(file:/C:/Users/33751/Desktop/Spark%20with%20scala%20udemy/SparkScalaCourse/SparkScalaCourse/project/, ...) took 2136.3106ms
[debug]       Load.apply: load took 2137.9125ms
[debug]       Load.apply: resolveProjects took 0.1191ms
[debug]       Load.apply: finalTransforms took 7.9351ms
[debug]       Load.apply: config.delegates took 0.3397ms
[debug]       Load.apply: Def.make(settings)... took 64.3352ms
[debug]       Load.apply: structureIndex took 21.9422ms
[debug]       Load.apply: mkStreams took 0.0039ms
[info] loading project definition from C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3453.4838ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse
[debug]       Load.loadUnit: mkEval took 0.2888ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.0543 ms
[info] loading settings for project sparkscalacourse from build.sbt ...
[debug]         Load.resolveProject(sparkscalacourse) took 33.3218ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sparkscalacourse, base: C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse, plugins: List(<none>))) took 37.0964ms
[debug] [Loading] Done in C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse, returning: (sparkscalacourse)
[debug]     Load.loadUnit: loadedProjectsRaw took 1083.4957ms
[debug]     Load.loadUnit: cleanEvalClasses took 2.2292ms
[debug]   Load.loadUnit(file:/C:/Users/33751/Desktop/Spark%20with%20scala%20udemy/SparkScalaCourse/SparkScalaCourse/, ...) took 4540.0668ms
[debug] Load.apply: load took 4541.7787ms
[debug] Load.apply: resolveProjects took 0.1236ms
[debug] Load.apply: finalTransforms took 23.9338ms
[debug] Load.apply: config.delegates took 0.3007ms
[debug] Load.apply: Def.make(settings)... took 80.3727ms
[debug] Load.apply: structureIndex took 21.3494ms
[debug] Load.apply: mkStreams took 0.004ms
[info] set current project to SparkScalaCourse (in build file:/C:/Users/33751/Desktop/Spark%20with%20scala%20udemy/SparkScalaCourse/SparkScalaCourse/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 54453 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 54453, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SparkScalaCourse (in build file:/C:/Users/33751/Desktop/Spark%20with%20scala%20udemy/SparkScalaCourse/SparkScalaCourse/)
[debug] > Exec(idea-shell, None, None)
