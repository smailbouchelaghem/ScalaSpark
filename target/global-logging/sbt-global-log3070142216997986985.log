[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\33751\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\33751\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.8 (Oracle Corporation Java 11.0.16.1)
[debug]       Load.loadUnit: plugins took 79.1095ms
[debug]       Load.loadUnit: defsScala took 0.2415ms
[debug] [Loading] Scanning directory C:\Users\33751\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\33751\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.7711 ms
[debug]           Load.resolveProject(global-plugins) took 38.622ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\33751\.sbt\1.0\plugins, plugins: List(<none>))) took 75.5667ms
[debug] [Loading] Done in C:\Users\33751\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 93.5538ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2098ms
[debug]     Load.loadUnit(file:/C:/Users/33751/.sbt/1.0/plugins/, ...) took 180.6565ms
[debug]   Load.apply: load took 323.2044ms
[debug]   Load.apply: resolveProjects took 8.7009ms
[debug]   Load.apply: finalTransforms took 47.2917ms
[debug]   Load.apply: config.delegates took 6.0688ms
[debug]   Load.apply: Def.make(settings)... took 335.1024ms
[debug]   Load.apply: structureIndex took 82.0202ms
[debug]   Load.apply: mkStreams took 1.5142ms
[info] loading global plugins from C:\Users\33751\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3877.0961ms
[debug]           Load.loadUnit: plugins took 20.86ms
[debug]           Load.loadUnit: defsScala took 0.0035ms
[debug] [Loading] Scanning directory C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse\project
[debug]             Load.loadUnit: mkEval took 9.0213ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.9775 ms
[info] loading settings for project sparkscalacourse-build from idea.sbt ...
[debug]               Load.resolveProject(sparkscalacourse-build) took 9.9283ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparkscalacourse-build, base: C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse\project, plugins: List(<none>))) took 12.5745ms
[debug] [Loading] Done in C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse\project, returning: (sparkscalacourse-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 146.1641ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.1894ms
[debug]         Load.loadUnit(file:/C:/Users/33751/Desktop/Spark%20with%20scala%20udemy/SparkScalaCourse/SparkScalaCourse/project/, ...) took 173.2574ms
[debug]       Load.apply: load took 174.8821ms
[debug]       Load.apply: resolveProjects took 0.1411ms
[debug]       Load.apply: finalTransforms took 7.9849ms
[debug]       Load.apply: config.delegates took 0.3347ms
[debug]       Load.apply: Def.make(settings)... took 100.4642ms
[debug]       Load.apply: structureIndex took 24.7018ms
[debug]       Load.apply: mkStreams took 0.0052ms
[info] loading project definition from C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 779.8957ms
[debug]     Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse
[debug]       Load.loadUnit: mkEval took 0.3312ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.3838 ms
[info] loading settings for project sparkscalacourse from build.sbt ...
[debug]         Load.resolveProject(sparkscalacourse) took 35.8289ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sparkscalacourse, base: C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse, plugins: List(<none>))) took 39.8736ms
[debug] [Loading] Done in C:\Users\33751\Desktop\Spark with scala udemy\SparkScalaCourse\SparkScalaCourse, returning: (sparkscalacourse)
[debug]     Load.loadUnit: loadedProjectsRaw took 2490.7245ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.1104ms
[debug]   Load.loadUnit(file:/C:/Users/33751/Desktop/Spark%20with%20scala%20udemy/SparkScalaCourse/SparkScalaCourse/, ...) took 3282.6908ms
[debug] Load.apply: load took 3284.4178ms
[debug] Load.apply: resolveProjects took 0.2008ms
[debug] Load.apply: finalTransforms took 30.1013ms
[debug] Load.apply: config.delegates took 0.2943ms
[debug] Load.apply: Def.make(settings)... took 69.1706ms
[debug] Load.apply: structureIndex took 22.77ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to SparkScalaCourse (in build file:/C:/Users/33751/Desktop/Spark%20with%20scala%20udemy/SparkScalaCourse/SparkScalaCourse/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55389 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55389, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SparkScalaCourse (in build file:/C:/Users/33751/Desktop/Spark%20with%20scala%20udemy/SparkScalaCourse/SparkScalaCourse/)
[debug] > Exec(idea-shell, None, None)
